{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport MarkdownIt from 'markdown-it';\nimport markdownItFootnote from 'markdown-it-footnote';\nimport markdownItTaskLists from 'markdown-it-task-lists';\nimport markdownItAbbr from 'markdown-it-abbr';\nimport markdownItContainer from 'markdown-it-container';\nimport hljs from 'highlight.js';\nimport axios from 'axios';\nimport markdownItHighlightjs from 'markdown-it-highlightjs';\nimport router from '../router';\nexport default {\n  name: 'UserDashboard',\n  components: {},\n  computed: {\n    // 将 Markdown 文本渲染为 HTML\n    html() {\n      return this.md.render(this.messages);\n    }\n  },\n  data() {\n    return {\n      md: new MarkdownIt().use(markdownItFootnote).use(markdownItTaskLists, {\n        enabled: true\n      }).use(markdownItAbbr).use(markdownItContainer, 'warning').use(markdownItHighlightjs, {\n        hljs\n      }),\n      // 添加 markdown-it-highlightjs 插件\n      current_id: null,\n      queryKeyword: '',\n      tempResult: {},\n      flag: 0,\n      loading: false,\n      wenxin_messages: [],\n      tongyi_messages: [],\n      chatgpt_messages: [],\n      socket: null,\n      eventSource: null,\n      // 添加事件源变量\n      stopIcon: '@/assets/等待.png',\n      uploadIcon: '@/assets/上传.png',\n      themes: [] // 存储从数据库中获取的主题列表\n    };\n  },\n  created() {\n    // 在组件实例化后立即运行一次 fetchThemes()\n    this.fetchThemes();\n  },\n  methods: {\n    get_conversation(themeId) {\n      this.flag = 0;\n      this.current_id = themeId;\n      // 发起 HTTP GET 请求到后端路由 /conversations/get_conversation\n      fetch(`/api/conversations/get_conversation?id=${themeId}`, {\n        method: 'GET',\n        credentials: 'include' // 如果使用会话进行身份验证，则包括 cookies\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => {\n        // 在这里处理从后端获取的对话记录数据\n\n        this.chatgpt_messages = data.chatgpt_messages;\n        this.tongyi_messages = data.tongyi_messages;\n        this.wenxin_messages = data.wenxin_messages;\n      }).catch(error => {\n        // 处理错误情况\n        console.error('Error:', error.message);\n      });\n    },\n    fetchThemes() {\n      // 发起 GET 请求到后端路由\n      fetch('/api/conversations/get_conversation_summary', {\n        method: 'GET',\n        credentials: 'include' // Include cookies if using sessions for authentication\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => {\n        // 在这里处理返回的聊天记录数据\n        // 假设返回的数据格式为 [{ id: 1, summary: '主题1' }, { id: 2, summary: '主题2' }, ...]\n        this.themes = data;\n      }).catch(error => {\n        console.error('Error:', error.message);\n      });\n    },\n    //对话id一定是在保存时在后端设置的，所以前端创建新对话时id设置为null\n    //假如当前id不为null，那么就是旧对话，应该更新相应对话id的内容，而不是增加保存记录\n    //假如当前id为null，那么就是新对话，增加保存记录\n    CreateNewAndSave() {\n      if (this.current_id == null) {\n        // 如果当前ID为null，创建新对话\n        fetch('/api/conversations/new_conversation', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to create and save conversation');\n          }\n          return response.json();\n        }).then(data => {\n          alert('Conversation created and saved successfully.');\n          this.messages_chatgpt = [];\n          this.messages_tongyi = [];\n          this.messages_wenxin = [];\n          this.current_id = null; // 保存新创建对话的ID\n          window.location.reload();\n          this.fetchThemes();\n        }).catch(error => {\n          console.error('Error:', error.message);\n          alert('Failed to create and save conversation');\n        });\n      } else {\n        // 如果当前ID不为null，更新已有对话\n        fetch(`/api/conversations/update_conversation?id=` + this.current_id, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to update conversation');\n          }\n          return response.json();\n        }).then(data => {\n          alert('Conversation updated successfully.');\n          this.messages_chatgpt = [];\n          this.messages_tongyi = [];\n          this.messages_wenxin = [];\n          this.current_id = null;\n          window.location.reload();\n          this.fetchThemes();\n        }).catch(error => {\n          console.error('Error:', error.message);\n          alert('Failed to update conversation');\n        });\n      }\n    },\n    renderMessage(message) {\n      // 这里假设 this.md 是你的 markdown 渲染器\n      if (this.current_id == null || this.flag) {\n        return message;\n      }\n      return this.md.render(message);\n    },\n    deleteConversation(id) {\n      axios.delete(`api/conversations/delete_conversation?id=` + id).then(response => {\n        console.log(response.data.message);\n        // 如果需要，在这里可以更新界面上的数据或者进行其他操作\n      }).catch(error => {\n        console.error('Error deleting conversation:', error);\n      });\n      window.location.reload();\n      this.fetchThemes();\n    },\n    async handleSearch() {\n      // 如果正在加载中，则不执行新的搜索操作\n      if (this.loading) {\n        return;\n      }\n      this.flag = 1;\n      const keyword = this.queryKeyword;\n      this.loading = true;\n      try {\n        let zxakey = \"zxa\";\n        // 初始化一个用于 SSE 的 message 对象\n        let wenxin_sseMessage = {\n          orgcontent: '',\n          content: '',\n          role: 'assistant',\n          zxakey: zxakey\n        };\n        let tongyi_sseMessage = {\n          orgcontent: '',\n          content: '',\n          role: 'assistant',\n          zxakey: zxakey\n        };\n        let chatgpt_sseMessage = {\n          orgcontent: '',\n          content: '',\n          role: 'assistant',\n          zxakey: zxakey\n        };\n        this.wenxin_messages.push({\n          content: keyword,\n          role: 'user'\n        });\n        this.tongyi_messages.push({\n          content: keyword,\n          role: 'user'\n        });\n        this.chatgpt_messages.push({\n          content: keyword,\n          role: 'user'\n        });\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n        let wenxin_friendMessage = wenxin_sseMessage;\n        // 创建一个新的 EventSource 实例\n        this.wenxin_eventSource = new EventSource('/api/wenxin?query=' + keyword, {\n          withCredentials: true\n        });\n        // 设置消息事件监听器\n        this.wenxin_eventSource.onmessage = event => {\n          try {\n            const dataObject = JSON.parse(event.data);\n            // 判断是否为最后一个消息，如果是，则关闭事件源\n            if (dataObject.message === 'done') {\n              this.wenxin_eventSource.close();\n              this.loading = false;\n            }\n            if (dataObject.message != 'done') {\n              // 累加接收到的数据到 friendMessage.orgcontent 中\n              wenxin_friendMessage.orgcontent += dataObject.message.toLocaleString();\n              wenxin_friendMessage.orgcontent = wenxin_friendMessage.orgcontent.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\n              // 更新 friendMessage.content，这里假设 md.render 可以处理累加的字符串\n              wenxin_friendMessage.content = this.md.render(wenxin_friendMessage.orgcontent);\n            }\n            this.scrollToBottom();\n          } catch (e) {\n            console.error('Error parsing JSON:', e);\n          }\n        };\n        this.wenxin_messages.push(wenxin_sseMessage);\n        this.queryKeyword = ''; // 清空输入框\n        this.wenxin_eventSource.onerror = error => {\n          console.error('EventSource failed:', error);\n          this.wenxin_eventSource.close();\n        };\n        let tongyi_friendMessage = tongyi_sseMessage;\n        // 创建一个新的 EventSource 实例\n        this.tongyi_eventSource = new EventSource('/api/tongyi?query=' + keyword, {\n          withCredentials: true\n        });\n        // 设置消息事件监听器\n        this.tongyi_eventSource.onmessage = event => {\n          try {\n            const dataObject = JSON.parse(event.data);\n            // 判断是否为最后一个消息，如果是，则关闭事件源\n            if (dataObject.message === 'done') {\n              this.tongyi_eventSource.close();\n              this.loading = false;\n            }\n            if (dataObject.message != 'done') {\n              // 累加接收到的数据到 friendMessage.orgcontent 中\n              tongyi_friendMessage.orgcontent += dataObject.message.toLocaleString();\n              tongyi_friendMessage.orgcontent = tongyi_friendMessage.orgcontent.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\n              // 更新 friendMessage.content，这里假设 md.render 可以处理累加的字符串\n              tongyi_friendMessage.content = this.md.render(tongyi_friendMessage.orgcontent);\n            }\n            this.scrollToBottom();\n          } catch (e) {\n            console.error('Error parsing JSON:', e);\n          }\n        };\n        this.tongyi_messages.push(tongyi_sseMessage);\n        this.queryKeyword = ''; // 清空输入框\n        this.tongyi_eventSource.onerror = error => {\n          console.error('EventSource failed:', error);\n          this.tongyi_eventSource.close();\n        };\n        let chatgpt_friendMessage = chatgpt_sseMessage;\n        // 创建一个新的 EventSource 实例\n        this.chatgpt_eventSource = new EventSource('/api/chatgpt?query=' + keyword, {\n          withCredentials: true\n        });\n        // 设置消息事件监听器\n        this.chatgpt_eventSource.onmessage = event => {\n          try {\n            const dataObject = JSON.parse(event.data);\n            // 判断是否为最后一个消息，如果是，则关闭事件源\n            if (dataObject.message === 'done') {\n              this.chatgpt_eventSource.close();\n              this.loading = false;\n            }\n            if (dataObject.message != 'done') {\n              // 累加接收到的数据到 friendMessage.orgcontent 中\n              chatgpt_friendMessage.orgcontent += dataObject.message.toLocaleString();\n              chatgpt_friendMessage.orgcontent = chatgpt_friendMessage.orgcontent.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\n              // 更新 friendMessage.content，这里假设 md.render 可以处理累加的字符串\n              chatgpt_friendMessage.content = this.md.render(chatgpt_friendMessage.orgcontent);\n            }\n            this.scrollToBottom();\n          } catch (e) {\n            console.error('Error parsing JSON:', e);\n          }\n        };\n        this.chatgpt_messages.push(chatgpt_sseMessage);\n        this.queryKeyword = ''; // 清空输入框\n        this.chatgpt_eventSource.onerror = error => {\n          console.error('EventSource failed:', error);\n          this.chatgpt_eventSource.close();\n        };\n      } catch (error) {\n        console.error('发送消息时出错：', error);\n      } finally {}\n    },\n    closeEventSource() {\n      this.loading = false;\n      if (this.eventSource) {\n        this.eventSource.close();\n      }\n    },\n    scrollToBottom() {\n      const messageContainer = this.$refs.messageContainer;\n      if (messageContainer) {\n        messageContainer.scrollTop = messageContainer.scrollHeight;\n      }\n    },\n    beforeDestroy() {\n      if (this.eventSource) {\n        this.eventSource.close();\n      }\n    },\n    goToLogout() {\n      router.push({\n        name: 'Logout'\n      });\n    },\n    goToFeedback() {\n      router.push({\n        name: 'Feedback'\n      });\n    }\n  }\n};","map":{"version":3,"names":["MarkdownIt","markdownItFootnote","markdownItTaskLists","markdownItAbbr","markdownItContainer","hljs","axios","markdownItHighlightjs","router","name","components","computed","html","md","render","messages","data","use","enabled","current_id","queryKeyword","tempResult","flag","loading","wenxin_messages","tongyi_messages","chatgpt_messages","socket","eventSource","stopIcon","uploadIcon","themes","created","fetchThemes","methods","get_conversation","themeId","fetch","method","credentials","then","response","ok","Error","json","catch","error","console","message","CreateNewAndSave","headers","alert","messages_chatgpt","messages_tongyi","messages_wenxin","window","location","reload","renderMessage","deleteConversation","id","delete","log","handleSearch","keyword","zxakey","wenxin_sseMessage","orgcontent","content","role","tongyi_sseMessage","chatgpt_sseMessage","push","$nextTick","scrollToBottom","wenxin_friendMessage","wenxin_eventSource","EventSource","withCredentials","onmessage","event","dataObject","JSON","parse","close","toLocaleString","replace","e","onerror","tongyi_friendMessage","tongyi_eventSource","chatgpt_friendMessage","chatgpt_eventSource","closeEventSource","messageContainer","$refs","scrollTop","scrollHeight","beforeDestroy","goToLogout","goToFeedback"],"sources":["src/components/UserDashboard.vue"],"sourcesContent":["<template>\r\n\r\n  <div class=\"home\">\r\n    <div class=\"sidebar\">\r\n      <div class=\"sidebar-header\">\r\n        <h2>历史聊天记录</h2>\r\n        <transition name=\"button-fade\">\r\n          <el-button type=\"primary\" icon=\"el-icon-edit\" @click=\"CreateNewAndSave\">创建并保存</el-button>\r\n        </transition>\r\n      </div>\r\n      <!-- 左侧侧边栏内容 -->\r\n      <div class=\"sidebar-list\">\r\n        <ul>\r\n          <li v-for=\"(theme, index) in themes\" :key=\"index\">\r\n            <div :class=\"{ 'theme-container': true, 'selected-theme': theme.id === current_id }\">\r\n              <a :href=\"'#'+theme.id\" class=\"truncate-text\"\r\n                 @click.prevent=\"get_conversation(theme.id)\">{{ theme.summary }}</a>\r\n              <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"deleteConversation(theme.id)\"></el-button>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"home-right\">\r\n\r\n      <div class=\"right-version\">\r\n        <div class=\"llm-chat-demo\">\r\n          <span class=\"chat-demo\">ChatWithAIs</span><span class=\"version\"> V1</span>\r\n        </div>\r\n\r\n        <!-- 添加登出和反馈按钮 -->\r\n        <div class=\"user-actions\">\r\n          <button @click=\"goToLogout\" class=\"action-button logout-button\">登出</button>\r\n          <button @click=\"goToFeedback\" class=\"action-button feedback-button\">反馈</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"right-body\" :class=\"wenxin_messages.length === 0 ? 'nodata' : ''\" ref=\"messageContainer\">\r\n        <div class=\"container\">\r\n          <div class=\"left\">\r\n            <div v-for=\"(message, index) in wenxin_messages\" class=\"main-message\" :key=\"index\"\r\n                 :class=\"{'user-message': message.role === 'user', 'friend-message': message.role === 'assistant'}\">\r\n              <!-- 显示用户标识和图片 -->\r\n              <div class=\"message-role\"\r\n                   :class=\"{'user-message': message.role === 'user', 'friend-message': message.role === 'assistant'}\">\r\n                <img v-if=\"message.role === 'user'\" src=\"@/assets/我的.png\" alt=\"User Icon\">\r\n                <img v-else-if=\"message.role === 'assistant'\" src=\"@/assets/文心一言.png\" alt=\"Friend Icon\">\r\n                <span class=\"message-role-name\"\r\n                      :class=\"message.role === 'user' ? 'user-color' : 'friend-color'\">{{ message.role }}:</span>\r\n              </div>\r\n              <div v-if=\"message.role === 'user'\" class=\"user-message\">{{ message.content }}</div>\r\n              <div v-else class=\"friend-message\" v-html=\"renderMessage(message.content)\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"mid\">\r\n            <div v-for=\"(message, index) in tongyi_messages\" class=\"main-message\" :key=\"index\"\r\n                 :class=\"{'user-message': message.role === 'user', 'friend-message': message.role === 'assistant'}\">\r\n              <!-- 显示用户标识和图片 -->\r\n              <div class=\"message-role\"\r\n                   :class=\"{'user-message': message.role === 'user', 'friend-message': message.role === 'assistant'}\">\r\n                <img v-if=\"message.role === 'user'\" src=\"@/assets/我的.png\" alt=\"User Icon\">\r\n                <img v-else-if=\"message.role === 'assistant'\" src=\"@/assets/通义千问.png\" alt=\"Friend Icon\">\r\n                <span class=\"message-role-name\"\r\n                      :class=\"message.role === 'user' ? 'user-color' : 'friend-color'\">{{ message.role }}:</span>\r\n              </div>\r\n              <div v-if=\"message.role === 'user'\" class=\"user-message\">{{message.content }}</div>\r\n              <div v-else class=\"friend-message\" v-html=\"renderMessage(message.content)\"></div>\r\n            </div>\r\n          </div>\r\n          <div class=\"right\">\r\n            <div v-for=\"(message, index) in chatgpt_messages\" class=\"main-message\" :key=\"index\"\r\n                 :class=\"{'user-message': message.role === 'user', 'friend-message': message.role === 'assistant'}\">\r\n              <!-- 显示用户标识和图片 -->\r\n              <div class=\"message-role\"\r\n                   :class=\"{'user-message': message.role === 'user', 'friend-message': message.role === 'assistant'}\">\r\n                <img v-if=\"message.role === 'user'\" src=\"@/assets/我的.png\" alt=\"User Icon\">\r\n                <img v-else-if=\"message.role === 'assistant'\" src=\"@/assets/chatgpt.png\" alt=\"Friend Icon\">\r\n                <span class=\"message-role-name\"\r\n                      :class=\"message.role === 'user' ? 'user-color' : 'friend-color'\">{{ message.role }}:</span>\r\n              </div>\r\n              <div v-if=\"message.role === 'user'\" class=\"user-message\">{{ message.content }}</div>\r\n              <div v-else class=\"friend-message\" v-html=\"renderMessage(message.content)\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"right-input\" @keyup.enter=\"handleSearch\">\r\n        <!-- 输入框 -->\r\n        <el-input v-model=\"queryKeyword\" placeholder=\"给Chat Demo发送消息\" class=\"input\"></el-input>\r\n        <!-- 查询按钮 -->\r\n        <el-button v-if=\"!loading\" type=\"primary\" @click=\"handleSearch\">\r\n          <img  class=\"up-load\" src=\"@/assets/上传.png\">\r\n        </el-button>\r\n        <el-button v-if=\"loading\" type=\"primary\" @click=\"closeEventSource\">\r\n          <img  class=\"up-load\" src=\"@/assets/等待.png\" >\r\n        </el-button>\r\n      </div>\r\n\r\n      <div class=\"sec-notice\">Chat Demo may also make mistakes. Please consider checking important information.</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MarkdownIt from 'markdown-it';\r\nimport markdownItFootnote from 'markdown-it-footnote';\r\nimport markdownItTaskLists from 'markdown-it-task-lists';\r\nimport markdownItAbbr from 'markdown-it-abbr';\r\nimport markdownItContainer from 'markdown-it-container';\r\nimport hljs from 'highlight.js';\r\nimport axios from 'axios';\r\nimport markdownItHighlightjs from 'markdown-it-highlightjs';\r\nimport router from '../router';\r\n\r\nexport default {\r\n  name: 'UserDashboard',\r\n  components: {},\r\n  computed: {\r\n    // 将 Markdown 文本渲染为 HTML\r\n    html() {\r\n      return this.md.render(this.messages);\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      md: new MarkdownIt()\r\n          .use(markdownItFootnote)\r\n          .use(markdownItTaskLists, {enabled: true})\r\n          .use(markdownItAbbr)\r\n          .use(markdownItContainer, 'warning')\r\n          .use(markdownItHighlightjs, {hljs}), // 添加 markdown-it-highlightjs 插件\r\n      current_id: null,\r\n      queryKeyword: '',\r\n      tempResult: {},\r\n      flag:0,\r\n      loading: false,\r\n      wenxin_messages: [],\r\n      tongyi_messages:[],\r\n      chatgpt_messages:[],\r\n      socket: null,\r\n      eventSource: null, // 添加事件源变量\r\n      stopIcon: '@/assets/等待.png',\r\n      uploadIcon: '@/assets/上传.png',\r\n      themes: [], // 存储从数据库中获取的主题列表\r\n    }\r\n  },\r\n  created() {\r\n    // 在组件实例化后立即运行一次 fetchThemes()\r\n    this.fetchThemes();\r\n  },\r\n  methods: {\r\n   \r\n    get_conversation(themeId){\r\n      this.flag=0;\r\n      this.current_id=themeId;\r\n      // 发起 HTTP GET 请求到后端路由 /conversations/get_conversation\r\n      fetch(`/api/conversations/get_conversation?id=${themeId}`, {\r\n        method: 'GET',\r\n        credentials: 'include' // 如果使用会话进行身份验证，则包括 cookies\r\n      })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        // 在这里处理从后端获取的对话记录数据\r\n\r\n        this.chatgpt_messages=data.chatgpt_messages;\r\n\r\n        this.tongyi_messages=data.tongyi_messages;\r\n\r\n        this.wenxin_messages=data.wenxin_messages;\r\n\r\n      })\r\n      .catch(error => {\r\n        // 处理错误情况\r\n        console.error('Error:', error.message);\r\n      });\r\n  },\r\n\r\n    fetchThemes() {\r\n      // 发起 GET 请求到后端路由\r\n      fetch('/api/conversations/get_conversation_summary', {\r\n          method: 'GET',\r\n          credentials: 'include' // Include cookies if using sessions for authentication\r\n        })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          // 在这里处理返回的聊天记录数据\r\n          // 假设返回的数据格式为 [{ id: 1, summary: '主题1' }, { id: 2, summary: '主题2' }, ...]\r\n          this.themes = data;\r\n        })\r\n        .catch(error => {\r\n          console.error('Error:', error.message);\r\n        });\r\n    },\r\n    //对话id一定是在保存时在后端设置的，所以前端创建新对话时id设置为null\r\n    //假如当前id不为null，那么就是旧对话，应该更新相应对话id的内容，而不是增加保存记录\r\n    //假如当前id为null，那么就是新对话，增加保存记录\r\n    CreateNewAndSave() {\r\n      if (this.current_id == null) {\r\n          // 如果当前ID为null，创建新对话\r\n          fetch('/api/conversations/new_conversation', {\r\n              method: 'POST',\r\n              headers: {\r\n                  'Content-Type': 'application/json'\r\n              }\r\n          })\r\n          .then(response => {\r\n              if (!response.ok) {\r\n                  throw new Error('Failed to create and save conversation');\r\n              }\r\n              return response.json();\r\n          })\r\n          .then(data => {\r\n              alert('Conversation created and saved successfully.');\r\n              this.messages_chatgpt = [];\r\n          \r\n              this.messages_tongyi = [];\r\n              this.messages_wenxin = [];\r\n              this.current_id = null;  // 保存新创建对话的ID\r\n              window.location.reload();\r\n              this.fetchThemes();\r\n          })\r\n          .catch(error => {\r\n              console.error('Error:', error.message);\r\n              alert('Failed to create and save conversation');\r\n          });\r\n      } else {\r\n          // 如果当前ID不为null，更新已有对话\r\n          fetch(`/api/conversations/update_conversation?id=`+this.current_id , {\r\n              method: 'PUT',\r\n              headers: {\r\n                  'Content-Type': 'application/json'\r\n              },\r\n          })\r\n          .then(response => {\r\n              if (!response.ok) {\r\n                  throw new Error('Failed to update conversation');\r\n              }\r\n              return response.json();\r\n          })\r\n          .then(data => {\r\n              alert('Conversation updated successfully.');\r\n              this.messages_chatgpt = [];\r\n              this.messages_tongyi = [];\r\n              this.messages_wenxin = [];\r\n              this.current_id=null;\r\n              window.location.reload();\r\n              this.fetchThemes();\r\n          })\r\n          .catch(error => {\r\n              console.error('Error:', error.message);\r\n              alert('Failed to update conversation');\r\n          });\r\n      }\r\n  },\r\n     renderMessage(message) {\r\n      // 这里假设 this.md 是你的 markdown 渲染器\r\n      if(this.current_id==null || this.flag){\r\n        return message;\r\n      }\r\n      return this.md.render(message);\r\n  },\r\n\r\n  deleteConversation(id) {\r\n      axios.delete(`api/conversations/delete_conversation?id=`+id)\r\n        .then(response => {\r\n          console.log(response.data.message);\r\n          // 如果需要，在这里可以更新界面上的数据或者进行其他操作\r\n        })\r\n        .catch(error => {\r\n          console.error('Error deleting conversation:', error);\r\n        });\r\n      window.location.reload();\r\n      this.fetchThemes();\r\n    },\r\n\r\n    async handleSearch() {\r\n      // 如果正在加载中，则不执行新的搜索操作\r\n      if (this.loading) {\r\n        return;\r\n      }\r\n      this.flag=1;\r\n\r\n      const keyword = this.queryKeyword;\r\n      this.loading = true;\r\n      try {\r\n        let zxakey = \"zxa\";\r\n        // 初始化一个用于 SSE 的 message 对象\r\n        let wenxin_sseMessage = {\r\n          orgcontent: '',\r\n          content: '',\r\n          role: 'assistant',\r\n          zxakey: zxakey\r\n        };\r\n        let tongyi_sseMessage = {\r\n          orgcontent: '',\r\n          content: '',\r\n          role: 'assistant',\r\n          zxakey: zxakey\r\n        };\r\n        let chatgpt_sseMessage = {\r\n          orgcontent: '',\r\n          content: '',\r\n          role: 'assistant',\r\n          zxakey: zxakey\r\n        };\r\n\r\n        this.wenxin_messages.push({\r\n          content: keyword,\r\n          role: 'user'\r\n        });\r\n        this.tongyi_messages.push({\r\n          content: keyword,\r\n          role: 'user'\r\n        });\r\n        this.chatgpt_messages.push({\r\n          content: keyword,\r\n          role: 'user'\r\n        });\r\n\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom();\r\n        });\r\n\r\n        let wenxin_friendMessage = wenxin_sseMessage;\r\n        // 创建一个新的 EventSource 实例\r\n        this.wenxin_eventSource = new EventSource('/api/wenxin?query=' + keyword,{ withCredentials: true });\r\n        // 设置消息事件监听器\r\n        this.wenxin_eventSource.onmessage = (event) => {\r\n          try {\r\n            const dataObject = JSON.parse(event.data);\r\n            // 判断是否为最后一个消息，如果是，则关闭事件源\r\n            if (dataObject.message === 'done') {\r\n              this.wenxin_eventSource.close();\r\n              this.loading = false;\r\n            }\r\n            if (dataObject.message != 'done') {\r\n              // 累加接收到的数据到 friendMessage.orgcontent 中\r\n              wenxin_friendMessage.orgcontent += dataObject.message.toLocaleString();\r\n              wenxin_friendMessage.orgcontent = wenxin_friendMessage.orgcontent.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\r\n              // 更新 friendMessage.content，这里假设 md.render 可以处理累加的字符串\r\n              wenxin_friendMessage.content = this.md.render(wenxin_friendMessage.orgcontent);\r\n            }\r\n            this.scrollToBottom();\r\n          } catch (e) {\r\n            console.error('Error parsing JSON:', e);\r\n          }\r\n        };\r\n        this.wenxin_messages.push(wenxin_sseMessage);\r\n        this.queryKeyword = ''; // 清空输入框\r\n        this.wenxin_eventSource.onerror = error => {\r\n          console.error('EventSource failed:', error);\r\n          this.wenxin_eventSource.close();\r\n        };\r\n        let tongyi_friendMessage = tongyi_sseMessage;\r\n        // 创建一个新的 EventSource 实例\r\n        this.tongyi_eventSource = new EventSource('/api/tongyi?query=' + keyword,{ withCredentials: true });\r\n        // 设置消息事件监听器\r\n        this.tongyi_eventSource.onmessage = (event) => {\r\n          try {\r\n            const dataObject = JSON.parse(event.data);\r\n            // 判断是否为最后一个消息，如果是，则关闭事件源\r\n            if (dataObject.message === 'done') {\r\n              this.tongyi_eventSource.close();\r\n              this.loading = false;\r\n            }\r\n            if (dataObject.message != 'done') {\r\n              // 累加接收到的数据到 friendMessage.orgcontent 中\r\n              tongyi_friendMessage.orgcontent += dataObject.message.toLocaleString();\r\n              tongyi_friendMessage.orgcontent = tongyi_friendMessage.orgcontent.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\r\n              // 更新 friendMessage.content，这里假设 md.render 可以处理累加的字符串\r\n              tongyi_friendMessage.content = this.md.render(tongyi_friendMessage.orgcontent);\r\n            }\r\n            this.scrollToBottom();\r\n          } catch (e) {\r\n            console.error('Error parsing JSON:', e);\r\n          }\r\n        };\r\n        this.tongyi_messages.push(tongyi_sseMessage);\r\n        this.queryKeyword = ''; // 清空输入框\r\n        this.tongyi_eventSource.onerror = error => {\r\n          console.error('EventSource failed:', error);\r\n          this.tongyi_eventSource.close();\r\n        };\r\n        let chatgpt_friendMessage = chatgpt_sseMessage;\r\n        // 创建一个新的 EventSource 实例\r\n        this.chatgpt_eventSource = new EventSource('/api/chatgpt?query=' + keyword,{ withCredentials: true });\r\n        // 设置消息事件监听器\r\n        this.chatgpt_eventSource.onmessage = (event) => {\r\n          try {\r\n            const dataObject = JSON.parse(event.data);\r\n            // 判断是否为最后一个消息，如果是，则关闭事件源\r\n            if (dataObject.message === 'done') {\r\n              this.chatgpt_eventSource.close();\r\n              this.loading = false;\r\n            }\r\n            if (dataObject.message != 'done') {\r\n              // 累加接收到的数据到 friendMessage.orgcontent 中\r\n              chatgpt_friendMessage.orgcontent += dataObject.message.toLocaleString();\r\n              chatgpt_friendMessage.orgcontent = chatgpt_friendMessage.orgcontent.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\r\n              // 更新 friendMessage.content，这里假设 md.render 可以处理累加的字符串\r\n              chatgpt_friendMessage.content = this.md.render(chatgpt_friendMessage.orgcontent);\r\n            }\r\n            this.scrollToBottom();\r\n          } catch (e) {\r\n            console.error('Error parsing JSON:', e);\r\n          }\r\n        };\r\n        this.chatgpt_messages.push(chatgpt_sseMessage);\r\n        this.queryKeyword = ''; // 清空输入框\r\n        this.chatgpt_eventSource.onerror = error => {\r\n          console.error('EventSource failed:', error);\r\n          this.chatgpt_eventSource.close();\r\n        };\r\n\r\n      } catch (error) {\r\n        console.error('发送消息时出错：', error);\r\n      } finally {\r\n      }\r\n    },\r\n    closeEventSource() {\r\n      this.loading = false;\r\n      if (this.eventSource) {\r\n        this.eventSource.close();\r\n      }\r\n    },\r\n    scrollToBottom() {\r\n      const messageContainer = this.$refs.messageContainer;\r\n      if (messageContainer) {\r\n        messageContainer.scrollTop = messageContainer.scrollHeight;\r\n      }\r\n    },\r\n    beforeDestroy() {\r\n      if (this.eventSource) {\r\n        this.eventSource.close();\r\n      }\r\n    },\r\n    goToLogout() {\r\n      router.push({ name: 'Logout' });\r\n    },\r\n    goToFeedback(){\r\n      router.push({ name: 'Feedback'});\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.home {\r\n  height: 100%;\r\n  display: flex;\r\n}\r\n\r\n.home-right {\r\n  width: 100%;\r\n}\r\n\r\n.right-version {\r\n//width: 60%;\r\n  margin: auto;\r\n//background-color: #F9FFD8;\r\n  height: 5%;\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n  border-radius: 15px;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.version {\r\n  color: rgb(155, 155, 155);\r\n}\r\n\r\n.llm-chat-demo {\r\n  width: 58%;\r\n  //margin: auto;\r\n  margin-left: 30px;\r\n  margin-top: 24px;\r\n  //font-family: \"黑体\", \"SimHei\", sans-serif;\r\n  font-family: Söhne, ui-sans-serif, system;\r\n  font-variation-settings: normal;\r\n  font-weight: 550;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  color-scheme: light;\r\n}\r\n\r\n.chat-demo {\r\n  opacity: 0.65; /* 设置透明度为 0.7，您可以根据需要调整这个值 */\r\n}\r\n\r\n.right-body {\r\n  height: 85%;\r\n  overflow-y: auto;\r\n}\r\n\r\n.user-color {\r\n  color: #1296db;\r\n}\r\n\r\n.friend-color {\r\n  color: #77FC5D;\r\n}\r\n.nodata {\r\n  background-image: url(\"@/assets/happy.png\");\r\n  background-repeat: no-repeat;\r\n  background-size: 35%;\r\n  background-position: center 50%;\r\n}\r\n\r\n.main-message {\r\n  margin: auto;\r\n  width: 58%;\r\n  justify-content: center;\r\n}\r\n\r\n.message-role-name {\r\n  margin-left: 10px;\r\n//font-family: \"黑体\", \"SimHei\", sans-serif;\r\n  font-family: Söhne, ui-sans-serif, system;\r\n  font-weight: 550;\r\n  font-size: 18px;\r\n}\r\n\r\n.right-input {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 6.5%;\r\n\r\n  position: relative;\r\n}\r\n\r\n.sec-notice {\r\n  height: 3.5%;\r\n  font-size: 12px;\r\n  font-family: Söhne, ui-sans-serif;\r\n  color: rgb(155, 155, 155);\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.input {\r\n  width: 58%;\r\n  margin-right: 5px;\r\n}\r\n\r\n.up-load {\r\n//width: 30px;\r\n}\r\n\r\n::v-deep .el-button {\r\n  padding: 5px 6px;\r\n}\r\n\r\n::v-deep .el-input__inner {\r\n  height: 52px;\r\n  border-radius: 15px;\r\n  border: 1px solid #DCDFE6;\r\n}\r\n\r\n::v-deep .el-button--primary {\r\n  position: relative;\r\n  right: 3.5%;\r\n  background-color: rgba(180, 180, 180, 0.3) !important;\r\n  color: black !important;\r\n  border-color: rgba(180, 180, 180, 0.3) !important;\r\n}\r\n\r\n.user-message {\r\n  text-align: left;\r\n  padding: 5px;\r\n  margin-bottom: 5px;\r\n  border-radius: 15px;\r\n}\r\n\r\n.friend-message {\r\n  background-color: rgba(227, 255, 255, 0.2); /* 这里的 0.5 是透明度，你可以根据需要调整 */\r\n  text-align: left;\r\n  padding: 5px;\r\n  margin-bottom: 5px;\r\n\r\n}\r\n\r\n.container {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n}\r\n\r\n.left {\r\n  grid-column: 1 / 2;\r\n}\r\n\r\n.mid {\r\n  grid-column: 2 / 3;\r\n}\r\n\r\n.right {\r\n  grid-column: 3 / 4;\r\n}\r\n\r\n.logout-button,\r\n.feedback-button {\r\n  background-color: #1296db;\r\n  color: #fff;\r\n  padding: 8px 16px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin-right: 10px;\r\n  margin-top: 5px;\r\n}\r\n\r\n.logout-button:hover,\r\n.feedback-button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.user-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 10px; /* 向下移动 */\r\n  right: 10px;\r\n}\r\n\r\n/* 侧边栏样式可根据需要自行调整 */\r\n.sidebar {\r\n  width: 250px;\r\n  background-color: #f0f0f0; /* 背景色调整为灰色 */\r\n  padding: 20px;\r\n  overflow-y: auto; /* 添加滚动条 */\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* 字体样式 */\r\n  color: #333; /* 文字颜色 */\r\n}\r\n\r\n.sidebar-header h2 {\r\n  margin: 0;\r\n  font-size: 20px;\r\n}\r\n\r\n.sidebar-header {\r\n  text-align: center;\r\n}\r\n\r\n.sidebar-header .el-button {\r\n  width: 105%; /* 让按钮宽度布满父容器 */\r\n  height: 40px;\r\n  margin-top: 10px; /* 可以根据需要调整按钮的上边距 */\r\n  font-size: 15px;\r\n  background-color: #ffffff !important;\r\n  border: 1px solid rgba(180, 180, 180, 0.3) !important;\r\n}\r\n\r\n.sidebar ul {\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n\r\n.sidebar ul li {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.sidebar ul li a {\r\n  text-decoration: none;\r\n  color: #333;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.sidebar ul li:hover {\r\n  background-color: #ddd;\r\n  border-radius: 3px;\r\n  width: 100%;\r\n}\r\n\r\n.sidebar-list .el-button {\r\n  background-color: transparent !important; /* 使按钮背景透明 */\r\n  border: none !important; /* 可选，去除按钮边框 */\r\n  box-shadow: none !important; /* 可选，去除按钮阴影 */\r\n  color: inherit !important; /* 保持文本颜色与父元素一致 */\r\n  padding: 0 !important; /* 可选，去除按钮内边距 */\r\n}\r\n\r\n.theme-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  height: 25px;\r\n}\r\n\r\n.selected-theme {\r\n  font-weight: bold; /* 添加选中主题的样式 */\r\n  background-color: #dddddd;\r\n  border-radius: 3px;\r\n  width: 100%;\r\n}\r\n\r\n.truncate-text {\r\n  display: block;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis; /* 添加省略号 */\r\n}\r\n\r\n::v-deep .friend-message pre .hljs {\r\n  border-radius: 10px !important; /* 圆角 */\r\n  background-color: #FAF7F7; /* 例子中的背景色 */\r\n}\r\n\r\n/* 设置滚动条的样式 */\r\n::-webkit-scrollbar {\r\n  width: 6px; /* 设置滚动条宽度 */\r\n}\r\n\r\n/* 设置滚动条轨道的样式 */\r\n::-webkit-scrollbar-track {\r\n  background: #f1f1f1; /* 设置滚动条轨道的背景色 */\r\n}\r\n\r\n/* 设置滚动条滑块的样式 */\r\n::-webkit-scrollbar-thumb {\r\n  background: #888; /* 设置滚动条滑块的背景色 */\r\n  border-radius: 3px; /* 设置滚动条滑块的圆角 */\r\n}\r\n\r\n/* 鼠标悬停时滚动条滑块的样式 */\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #555; /* 设置鼠标悬停时滚动条滑块的背景色 */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}