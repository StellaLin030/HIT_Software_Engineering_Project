{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nexport default {\n  name: 'RegisterComponent',\n  data() {\n    return {\n      username: '',\n      password: '',\n      email: '',\n      authcode: '',\n      message: '',\n      isSendingCode: false,\n      countdown: 60,\n      timer: null\n    };\n  },\n  computed: {\n    sendButtonText() {\n      return this.isSendingCode ? `重新发送 (${this.countdown}s)` : '发送验证码';\n    }\n  },\n  methods: {\n    async sendAuthCode() {\n      try {\n        this.isSendingCode = true;\n        this.countdown = 60;\n        this.startCountdown();\n        const response = await axios.post('/api/authenticate', {\n          username: this.username,\n          email: this.email\n        });\n        this.message = response.data.message;\n      } catch (error) {\n        this.message = error.response && error.response.data ? error.response.data.message : '验证码发送失败，请稍后重试。';\n        this.isSendingCode = false;\n        clearInterval(this.timer);\n      }\n    },\n    startCountdown() {\n      this.timer = setInterval(() => {\n        if (this.countdown > 0) {\n          this.countdown--;\n        } else {\n          this.isSendingCode = false;\n          clearInterval(this.timer);\n        }\n      }, 1000);\n    },\n    async register() {\n      try {\n        const response = await axios.post('/api/register', {\n          username: this.username,\n          password: this.password,\n          email: this.email,\n          authcode: this.authcode\n        });\n        this.message = response.data.message;\n        if (response.status === 201) {\n          this.message += ' 2s后自动跳转到登录页面...';\n          setTimeout(() => {\n            this.$router.push('/login');\n          }, 2000); // 2秒后重定向到登录页面\n        }\n      } catch (error) {\n        this.message = error.response && error.response.data ? error.response.data.message : '注册失败，请稍后重试。';\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","defaults","withCredentials","name","data","username","password","email","authcode","message","isSendingCode","countdown","timer","computed","sendButtonText","methods","sendAuthCode","startCountdown","response","post","error","clearInterval","setInterval","register","status","setTimeout","$router","push"],"sources":["src/components/Register.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 顶部栏 -->\r\n    <div class=\"top-bar\">\r\n      <div class=\"left\">\r\n        <span>ChatWithAIs V2 | 一站式大语言模型访问平台</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"register-page\">\r\n      <div class=\"register-container\">\r\n        <h2 class=\"register-title\">注册新账号</h2>\r\n        <form @submit.prevent=\"register\" class=\"register-form\">\r\n          <div class=\"form-group\">\r\n            <label for=\"username\">用户名：</label>\r\n            <input type=\"text\" v-model=\"username\" class=\"input-field\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"password\">密码：</label>\r\n            <input type=\"password\" v-model=\"password\" class=\"input-field\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">邮箱：</label>\r\n            <div class=\"input-with-button\">\r\n              <input type=\"email\" v-model=\"email\" class=\"input-field\" required>\r\n              <button type=\"button\" :disabled=\"isSendingCode\" @click=\"sendAuthCode\" class=\"auth-code-button\">\r\n                {{ sendButtonText }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"authcode\">验证码：</label>\r\n            <input type=\"text\" v-model=\"authcode\" class=\"input-field\" required>\r\n          </div>\r\n          <button type=\"submit\" class=\"register-button\">注册</button>\r\n        </form>\r\n        <p class=\"register-message\">{{ message }}</p>\r\n        <p>已有账号？ <router-link to=\"/login\">点击这里登录</router-link></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\naxios.defaults.withCredentials = true;\r\nexport default {\r\n  name: 'RegisterComponent',\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      email: '',\r\n      authcode: '',\r\n      message: '',\r\n      isSendingCode: false,\r\n      countdown: 60,\r\n      timer: null\r\n    };\r\n  },\r\n  computed: {\r\n    sendButtonText() {\r\n      return this.isSendingCode ? `重新发送 (${this.countdown}s)` : '发送验证码';\r\n    }\r\n  },\r\n  methods: {\r\n    async sendAuthCode() {\r\n      try {\r\n        this.isSendingCode = true;\r\n        this.countdown = 60;\r\n        this.startCountdown();\r\n\r\n        const response = await axios.post('/api/authenticate', {\r\n          username: this.username,\r\n          email: this.email\r\n        });\r\n        this.message = response.data.message;\r\n      } catch (error) {\r\n        this.message = error.response && error.response.data ? error.response.data.message : '验证码发送失败，请稍后重试。';\r\n        this.isSendingCode = false;\r\n        clearInterval(this.timer);\r\n      }\r\n    },\r\n    startCountdown() {\r\n      this.timer = setInterval(() => {\r\n        if (this.countdown > 0) {\r\n          this.countdown--;\r\n        } else {\r\n          this.isSendingCode = false;\r\n          clearInterval(this.timer);\r\n        }\r\n      }, 1000);\r\n    },\r\n    async register() {\r\n      try {\r\n        const response = await axios.post('/api/register', {\r\n          username: this.username,\r\n          password: this.password,\r\n          email: this.email,\r\n          authcode: this.authcode\r\n        });\r\n        this.message = response.data.message;\r\n        if (response.status === 201) {\r\n          this.message += ' 2s后自动跳转到登录页面...';\r\n          setTimeout(() => {\r\n            this.$router.push('/login');\r\n          }, 2000); // 2秒后重定向到登录页面\r\n        }\r\n      } catch (error) {\r\n        this.message = error.response && error.response.data ? error.response.data.message : '注册失败，请稍后重试。';\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 顶部栏样式 */\r\n.top-bar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: #D6EAF8;\r\n  padding: 10px;\r\n  color: #1296db;\r\n  height: 35px;\r\n  font-weight: bold;\r\n}\r\n\r\n.top-bar .left {\r\n  font-size: 20px;\r\n}\r\n\r\n.top-bar .right .home-link {\r\n  margin-left: 15px;\r\n  padding: 10px 20px;\r\n  background-color: #ffffff;\r\n  color: #1296db;\r\n  border-radius: 5px;\r\n  text-decoration: none;\r\n  transition: background-color 0.3s, color 0.3s;\r\n  font-weight: bold;\r\n}\r\n\r\n.top-bar .right .home-link:hover {\r\n  background-color: #1296db;\r\n  color: #ffffff;\r\n}\r\n\r\n/* 注册页面样式 */\r\n.register-page {\r\n  background-image: url('@/assets/homepage0.png');\r\n  background-size: cover;\r\n  background-position: center;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.register-container {\r\n  max-width: 400px;\r\n  width: 100%;\r\n  background-color: white;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  margin-top: -60px;\r\n}\r\n\r\n.register-title {\r\n  margin-bottom: 30px;\r\n  font-size: 28px;\r\n  font-weight: 600;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.form-group label {\r\n  width: 80px;\r\n}\r\n\r\n.input-field {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n  transition: box-shadow 0.3s ease;\r\n}\r\n\r\n.input-with-button {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.input-field:focus {\r\n  outline: none;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.auth-code-button {\r\n  margin-left: 0px;\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.auth-code-button:disabled {\r\n  background-color: #6c757d;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.auth-code-button:hover:enabled {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.register-button {\r\n  background-color: #28a745;\r\n  color: #fff;\r\n  padding: 12px 24px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.register-button:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n.register-message {\r\n  margin-top: 20px;\r\n  font-size: 16px;\r\n  color: #ff0000;\r\n}\r\n\r\na {\r\n  color: #007bff;\r\n  text-decoration: none;\r\n}\r\n\r\na:hover {\r\n  text-decoration: underline;\r\n}\r\n</style>\r\n"],"mappings":";AA4CA,OAAAA,KAAA;AACAA,KAAA,CAAAC,QAAA,CAAAC,eAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,QAAA;MACAC,KAAA;MACAC,QAAA;MACAC,OAAA;MACAC,aAAA;MACAC,SAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACAC,eAAA;MACA,YAAAJ,aAAA,iBAAAC,SAAA;IACA;EACA;EACAI,OAAA;IACA,MAAAC,aAAA;MACA;QACA,KAAAN,aAAA;QACA,KAAAC,SAAA;QACA,KAAAM,cAAA;QAEA,MAAAC,QAAA,SAAAlB,KAAA,CAAAmB,IAAA;UACAd,QAAA,OAAAA,QAAA;UACAE,KAAA,OAAAA;QACA;QACA,KAAAE,OAAA,GAAAS,QAAA,CAAAd,IAAA,CAAAK,OAAA;MACA,SAAAW,KAAA;QACA,KAAAX,OAAA,GAAAW,KAAA,CAAAF,QAAA,IAAAE,KAAA,CAAAF,QAAA,CAAAd,IAAA,GAAAgB,KAAA,CAAAF,QAAA,CAAAd,IAAA,CAAAK,OAAA;QACA,KAAAC,aAAA;QACAW,aAAA,MAAAT,KAAA;MACA;IACA;IACAK,eAAA;MACA,KAAAL,KAAA,GAAAU,WAAA;QACA,SAAAX,SAAA;UACA,KAAAA,SAAA;QACA;UACA,KAAAD,aAAA;UACAW,aAAA,MAAAT,KAAA;QACA;MACA;IACA;IACA,MAAAW,SAAA;MACA;QACA,MAAAL,QAAA,SAAAlB,KAAA,CAAAmB,IAAA;UACAd,QAAA,OAAAA,QAAA;UACAC,QAAA,OAAAA,QAAA;UACAC,KAAA,OAAAA,KAAA;UACAC,QAAA,OAAAA;QACA;QACA,KAAAC,OAAA,GAAAS,QAAA,CAAAd,IAAA,CAAAK,OAAA;QACA,IAAAS,QAAA,CAAAM,MAAA;UACA,KAAAf,OAAA;UACAgB,UAAA;YACA,KAAAC,OAAA,CAAAC,IAAA;UACA;QACA;MACA,SAAAP,KAAA;QACA,KAAAX,OAAA,GAAAW,KAAA,CAAAF,QAAA,IAAAE,KAAA,CAAAF,QAAA,CAAAd,IAAA,GAAAgB,KAAA,CAAAF,QAAA,CAAAd,IAAA,CAAAK,OAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}